<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="riku::type">
    <Expand>
      <Item Name="Children">child_types</Item>
    </Expand>
  </Type>
  
  <Type Name="riku::primitive_type">
    <DisplayString>{n}</DisplayString>
    <Expand>
      <ExpandedItem>*((riku::type*)this),nd</ExpandedItem>
      <Item Name="Size">s</Item>
      <Item Name="Pointer Type" Condition="ptr_type.points_to != 0">ptr_type</Item>
    </Expand>
  </Type>

  <Type Name="riku::generic_type">
    <DisplayString>{n}</DisplayString>
    <Expand>
      <LinkedListItems>
        <Size>props._List._Mypair._Myval2._Mysize</Size>
        <HeadPointer>props._List._Mypair._Myval2._Myhead-&gt;_Next</HeadPointer>
        <NextPointer>_Next</NextPointer>
        <ValueNode Name="Property {_Myval.first}">*(_Myval.second)</ValueNode>
      </LinkedListItems>
      <LinkedListItems>
        <Size>funcs._List._Mypair._Myval2._Mysize</Size>
        <HeadPointer>funcs._List._Mypair._Myval2._Myhead-&gt;_Next</HeadPointer>
        <NextPointer>_Next</NextPointer>
        <ValueNode Name="Method {_Myval.first}">*(_Myval.second)</ValueNode>
      </LinkedListItems>
      <Item Name="Parents">ps</Item>
      <ExpandedItem>*((riku::primitive_type*)this),nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="riku::pointer_type">
    <DisplayString Condition="points_to != 0">{*points_to}*</DisplayString>
    <Expand>
      <Item Name="Points to" Condition="points_to != 0">points_to</Item>
    </Expand>
  </Type>

  <Type Name="riku::template_instance">
    <DisplayString>{n}</DisplayString>
    <Expand>
      <Item Name="[Base]">base->n</Item>
      <ArrayItems>
        <Size>params.size()</Size>
        <ValuePointer>params._Mypair._Myval2._Myfirst</ValuePointer>
      </ArrayItems>
      <ExpandedItem>*((riku::generic_type*)this),nd</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="riku::member">
    <DisplayString Condition="t != 0 &amp; (riku::primitive_type*)t != 0">{((riku::primitive_type*)t)->n}</DisplayString>
    <DisplayString>Unknown type</DisplayString>
    <Expand>
      <Item Name="Type">*t</Item>
      <Item Name="Offset">offset</Item>
    </Expand>
  </Type>

  <Type Name="riku::get_set">
    <DisplayString Condition="g != 0 &amp; s != 0">Get/Set {*g->ret_type}</DisplayString>
    <DisplayString Condition="g != 0 &amp; s == 0">Get {*g->ret_type}</DisplayString>
    <DisplayString Condition="g == 0 &amp; s != 0">Set only</DisplayString>
    <DisplayString Condition="g == 0 &amp; s == 0">Empty</DisplayString>
    <DisplayString>Somehow invalid</DisplayString>
    <Expand>
      <Item Name="Type" Condition="g != 0 &amp; g->ret_type != 0">*g->ret_type</Item>
      <Item Name="Get()" Condition="g != 0">*g</Item>
      <Item Name="Set()" Condition="g != 0">*s</Item>
    </Expand>
  </Type>

  <Type Name="riku::var&lt;*&gt;">
    <DisplayString Condition="_pDebug != 0">{*_pDebug} [{*((riku::variant*)this),nd}]</DisplayString>
    <DisplayString>(empty)</DisplayString>
    <Expand>
      <Item Name="Value" Condition="_pDebug != 0">_pDebug</Item>
      <ExpandedItem>*((riku::variant*)this),nd</ExpandedItem>
    </Expand>
  </Type>
  
  <Type Name="riku::variant">
    <DisplayString Condition="(void*)refs == (void*)p.raw">{*(variant_type*)p.raw}</DisplayString>
    <DisplayString Condition="(void*)refs != 0">{*p.impl}</DisplayString>
    <DisplayString>empty</DisplayString>
    <Expand>
      <ExpandedItem Condition="refs != 0 &amp; (void*)refs == (void*)p.raw">*(variant_type*)p.raw</ExpandedItem>
      <Item Condition="refs != 0 &amp; (void*)refs == (void*)p.raw" Name="[Container]">*(variant_type*)p.raw</Item>
      <ExpandedItem Condition="refs != 0 &amp; (void*)refs != (void*)p.raw">*p.impl</ExpandedItem>
      <Item Condition="refs != 0 &amp; (void*)refs != (void*)p.raw" Name="[Container]">*p.impl</Item>
      <Item Condition="refs != 0 &amp; (void*)refs != (void*)p.raw" Name="[References]">*refs</Item>
    </Expand>
  </Type>

  <Type Name="riku::val">
    <DisplayString Condition="(primitive_type*)contains != 0 &amp; ((primitive_type*)contains)->s &lt;= sizeof(long long unsigned)">val (in-place) {((primitive_type*)contains)->n}</DisplayString>
    <DisplayString Condition="(primitive_type*)contains != 0 &amp; ((primitive_type*)contains)->s &gt; sizeof(long long unsigned)">val {(void*) d.p.v} {((primitive_type*)contains)->n} [{*d.p.refs} refs]</DisplayString>
    <DisplayString>val (empty)</DisplayString>
    <Expand>
      <Item Name="Type">*contains</Item>
      <Item Condition="(primitive_type*)contains != 0 &amp; ((primitive_type*)contains)->s &lt;= sizeof(long long unsigned)" Name="Address">(void*) d.raw</Item>
      <Item Condition="(primitive_type*)contains != 0 &amp; ((primitive_type*)contains)->s &gt; sizeof(long long unsigned)" Name="Address">(void*) d.p.v</Item>
      <Item Condition="(primitive_type*)contains != 0 &amp; ((primitive_type*)contains)->s &gt; sizeof(long long unsigned)" Name="Refs">d.p.v</Item>
    </Expand>
  </Type>

  <Type Name="riku::ptr">
    <DisplayString Condition="(contains != 0)">ptr {d.ptr} {((primitive_type*)contains)->n}</DisplayString>
    <DisplayString>ptr (empty)</DisplayString>
    <Expand>
      <Item Condition="contains != 0" Name="Type">*contains</Item>
      <Item Condition="d.ptr != 0" Name="Address">d.cptr</Item>
      <Item Name="const">c</Item>
    </Expand>
  </Type>

  <Type Name="riku::array">
    <DisplayString>array {vec}</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>vec.size()</Size>
        <ValuePointer>vec._Mypair._Myval2._Myfirst</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="riku::function">
    <DisplayString Condition="ret_type != 0 &amp; obj_type != 0 &amp; arg_count &gt; 0 &amp; is_const != 0">
	    {((riku::primitive_type*)ret_type)->n} {((riku::primitive_type*)obj_type)->n}::(*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type != 0 &amp; arg_count &gt; 0 &amp; is_const == 0">
	    {((riku::primitive_type*)ret_type)->n} {((riku::primitive_type*)obj_type)->n}::(*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type != 0 &amp; arg_count == 0 &amp; is_const != 0">
	    {((riku::primitive_type*)ret_type)->n} {((riku::primitive_type*)obj_type)->n}::(*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type != 0 &amp; arg_count == 0 &amp; is_const == 0">
	    {((riku::primitive_type*)ret_type)->n} {((riku::primitive_type*)obj_type)->n}::(*)( )
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const != 0">
	    {((riku::primitive_type*)ret_type)->n} (*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const == 0">
	    {((riku::primitive_type*)ret_type)->n} (*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const != 0">
	    {((riku::primitive_type*)ret_type)->n} (*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const == 0">
	    {((riku::primitive_type*)ret_type)->n} (*)( )
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const != 0 &amp; is_lambda != 0">
	    {((riku::primitive_type*)ret_type)->n} [](*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const == 0 &amp; is_lambda != 0">
	    {((riku::primitive_type*)ret_type)->n} [](*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const != 0 &amp; is_lambda != 0">
	    {((riku::primitive_type*)ret_type)->n} [](*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type != 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const == 0 &amp; is_lambda != 0">
	    {((riku::primitive_type*)ret_type)->n} [](*)( )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type != 0 &amp; arg_count &gt; 0 &amp; is_const != 0">
	    void {((riku::primitive_type*)obj_type)->n}::(*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type != 0 &amp; arg_count &gt; 0 &amp; is_const == 0">
	    void {((riku::primitive_type*)obj_type)->n}::(*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type != 0 &amp; arg_count == 0 &amp; is_const != 0">
	    void {((riku::primitive_type*)obj_type)->n}::(*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type != 0 &amp; arg_count == 0 &amp; is_const == 0">
	    void {((riku::primitive_type*)obj_type)->n}::(*)( )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const != 0">
	    void (*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const == 0">
	    void (*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const != 0">
	    void (*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const == 0">
	    void (*)( )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const != 0 &amp; is_lambda != 0">
	    void [](*)( {arg_count} ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count &gt; 0 &amp; is_const == 0 &amp; is_lambda != 0">
	    void [](*)( {arg_count} )
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const != 0 &amp; is_lambda != 0">
	    void [](*)( ) const
    </DisplayString>
    <DisplayString Condition="ret_type == 0 &amp; obj_type == 0 &amp; arg_count == 0 &amp; is_const == 0 &amp; is_lambda != 0">
	    void [](*)( )
    </DisplayString>
    <Expand>
      <Item Name="Returns" Condition="ret_type != 0">*((riku::primitive_type*)ret_type)</Item>
      <Item Name="Object" Condition="obj_type != 0">*((riku::primitive_type*)obj_type)</Item>
      <ArrayItems>
        <Direction>Forward</Direction>
        <Rank>1</Rank>
        <Size>arg_count</Size>
        <ValuePointer>arg_list,na</ValuePointer>
      </ArrayItems>
      <Item Name="const">is_const</Item>
    </Expand>
  </Type>

  <Type Name="riku::function::arg">
    <DisplayString Condition="type != 0 &amp; is_const != 0 &amp; is_ref != 0">{((riku::primitive_type*)type)->n} const&amp;</DisplayString>
    <DisplayString Condition="type != 0 &amp; is_const != 0 &amp; is_ref == 0">{((riku::primitive_type*)type)->n} const</DisplayString>
    <DisplayString Condition="type != 0 &amp; is_const == 0 &amp; is_ref != 0">{((riku::primitive_type*)type)->n} &amp;</DisplayString>
    <DisplayString Condition="type != 0 &amp; is_const == 0 &amp; is_ref == 0">{((riku::primitive_type*)type)->n}</DisplayString>
    <DisplayString>null</DisplayString>
  </Type>
</AutoVisualizer>